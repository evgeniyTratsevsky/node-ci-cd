stages:
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: $CI_REGISTRY
  IMAGE_TAG: $CI_COMMIT_SHA

# Cache dependencies between jobs
cache:
  paths:
    - node_modules/

# Test stage
test:
  stage: test
  image: node:18-alpine
  before_script:
    - npm ci
  script:
    - echo "Running tests..."
    # Add your test commands here
    - echo "Tests completed successfully"
  only:
    - merge_requests
    - main

# Build stage
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $REGISTRY/$CI_PROJECT_PATH:$IMAGE_TAG .
    - docker build -t $REGISTRY/$CI_PROJECT_PATH:latest .
    - docker push $REGISTRY/$CI_PROJECT_PATH:$IMAGE_TAG
    - docker push $REGISTRY/$CI_PROJECT_PATH:latest
  only:
    - main

# Deploy to staging
deploy-staging:
  stage: deploy
  image: 
    name: bitnami/kubectl:latest
    entrypoint: [""]
  before_script:
    - kubectl config use-context $KUBE_CONTEXT_STAGING
  script:
    - kubectl set image deployment/node-app node-app=$REGISTRY/$CI_PROJECT_PATH:$IMAGE_TAG -n staging
    - kubectl rollout status deployment/node-app -n staging
  environment:
    name: staging
    url: https://staging.yourdomain.com
  only:
    - main
  when: manual

# Deploy to production
deploy-production:
  stage: deploy
  image: 
    name: bitnami/kubectl:latest
    entrypoint: [""]
  before_script:
    - kubectl config use-context $KUBE_CONTEXT_PRODUCTION
  script:
    - kubectl set image deployment/node-app node-app=$REGISTRY/$CI_PROJECT_PATH:$IMAGE_TAG -n production
    - kubectl rollout status deployment/node-app -n production
  environment:
    name: production
    url: https://yourdomain.com
  only:
    - main
  when: manual 